import gensafeprime
import os


def generate_prime():
    prime = gensafeprime.generate(512)
    if prime & 1 == 0:
        prime = generate_prime()
    return prime


class GCD:
    def __init__(self, s, t, a):
        self.s = s
        self.t = t
        self.gcd = a


def exp_mod(a, b, c):
    x = 1
    while b > 0:
        if b & 1 == 1:
            x = (x * a) % c
        a = (a * a) % c
        b >>= 1
    return x % c


def gcd(a, b):
    prev_s = 1
    s = 0
    prev_t = 0
    t = 1

    while b:
        mod = exp_mod(a, 1, b)
        q = (a - mod) / b
        temp_s = s
        temp_t = t
        s = prev_s - (q * s)
        t = prev_t - (q * t)
        prev_s = temp_s
        prev_t = temp_t
        a, b = b, mod

    return GCD(prev_s, prev_t, a)


def generate_random():
    return int(os.urandom(32).encode('hex'), 16)

if __name__ == '__main__':
    e = 65537
    p = generate_prime()
    q = generate_prime()
    phi = (p-1)*(q-1)
    n = p*q

    gcdObj = gcd(p, q)
    invObj = gcd(e, phi)
    d = invObj.s

    m = generate_random()
    c = exp_mod(m, e, n)
    m_calc = exp_mod(c, d, n)

    if m == m_calc:
        print 'Success'
        print 'p={}'.format(p)
        print 'q={}'.format(q)
        print 'n={}'.format(n)
        print 'd={}'.format(d)
    else:
        print 'Failed'
        print 'm={}'.format(m)
        print 'c={}'.format(c)
        print 'm_calc={}'.format(m_calc)

    # encrypt
    m = 772427333057879924510498515502009580523476028888154179054419152637203852782656165597621634914050237745424314849825276762558542333134133951074716305269646313233
    e = 65537
    p=10568430321637601771309587165998117719471042473944961242453832003276611687783169540736735634811105216121315978326988963770738084688717868542865395913333827
    q=11798921995252181643161926331713093728191932543976857515503060370111146769938224024075642893592014609173242721556393124798339316787530369665778506835589623
    n=124696084977259988082708543986481677387699726617283421733726727358328330282329808257887848952605265199580437062608515258399824333928749076490804893944911181486704034196612061909156537108168564129708968852536166940101357481580019030253566517986038435286204613183225767089700478562369176866519330290815176077221
    d=34782933754509511301097012262033226182531069507157151421552074444017886169511439717448887906107646872965347360140779520557962504364732317123585215469229914397376577263013786163656444500294078858177264094548803784458297423122083132997691245864334511772488522876771254101635004917751720936307691606683340415309

    c = exp_mod(m, e, n)
    print '{}'.format(c)

    # decrypt
    e = 65537
    p=10568430321637601771309587165998117719471042473944961242453832003276611687783169540736735634811105216121315978326988963770738084688717868542865395913333827
    q=11798921995252181643161926331713093728191932543976857515503060370111146769938224024075642893592014609173242721556393124798339316787530369665778506835589623
    n=124696084977259988082708543986481677387699726617283421733726727358328330282329808257887848952605265199580437062608515258399824333928749076490804893944911181486704034196612061909156537108168564129708968852536166940101357481580019030253566517986038435286204613183225767089700478562369176866519330290815176077221
    d=34782933754509511301097012262033226182531069507157151421552074444017886169511439717448887906107646872965347360140779520557962504364732317123585215469229914397376577263013786163656444500294078858177264094548803784458297423122083132997691245864334511772488522876771254101635004917751720936307691606683340415309
    c = 91444537396017151590703478248429516863004667500833178909944990141194270575438655840837429941428222382782057638441105699872440797779433865483463631955961364126192702065518384462634093804604378561014264790322678178331103440668287008766327260542599266089351842997387414279285005161372135553903026381414512158628
    m = exp_mod(c, d, n)
    print '{}'.format(m)
